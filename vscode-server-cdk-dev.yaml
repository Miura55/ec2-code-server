AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instance with VSCode Server and CDK development environment'

Parameters:
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type
  
  AmiId:
    Type: String
    Default: ami-07faa35bbd2230d90
    Description: AMI ID for EC2 instance

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

  AllowedCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed to access VSCode Server
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VSCodeServer-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VSCodeServer-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: VSCodeServer-PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: VSCodeServer-PublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  VSCodeServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VSCode Server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref AllowedCIDR
          Description: VSCode Server web interface
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: VSCodeServer-SG

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Tags:
        - Key: Name
          Value: VSCodeServer-Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  VSCodeServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref VSCodeServerSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Node.js 20
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          yum install -y nodejs
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip
          
          # Install CDK
          npm install -g aws-cdk
          
          # Install Git
          yum install -y git
          
          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Python and pip
          yum install -y python3 python3-pip
          
          # Install code-server as ec2-user
          echo "Installing code-server..." >> /var/log/user-data.log
          sudo -u ec2-user bash -c 'export HOME=/home/ec2-user && curl -fsSL https://code-server.dev/install.sh | bash -s -- --method=standalone' 2>&1 | tee -a /var/log/user-data.log
          
          # Create symlink for system-wide access
          ln -sf /home/ec2-user/.local/bin/code-server /usr/bin/code-server
          echo "code-server symlinked to /usr/bin/" >> /var/log/user-data.log
          
          # Configure code-server
          sudo -u ec2-user mkdir -p /home/ec2-user/.config/code-server
          cat > /home/ec2-user/.config/code-server/config.yaml << EOF
          bind-addr: 0.0.0.0:8080
          auth: password
          password: ${AWS::StackName}-vscode
          cert: false
          disable-telemetry: true
          EOF
          
          chown -R ec2-user:ec2-user /home/ec2-user/.config
          
          # Create systemd service for code-server
          cat > /etc/systemd/system/code-server.service << EOF
          [Unit]
          Description=code-server
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user
          Environment=PATH=/usr/local/bin:/usr/bin:/bin
          Environment=HOME=/home/ec2-user
          ExecStart=/home/ec2-user/.local/bin/code-server --config /home/ec2-user/.config/code-server/config.yaml
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Start code-server service
          systemctl daemon-reload
          systemctl enable code-server
          systemctl start code-server
          
          # Log service status
          echo "code-server service status:" >> /var/log/user-data.log
          systemctl status code-server >> /var/log/user-data.log 2>&1
          
          # Wait for code-server to start
          sleep 30
          
          # Install useful VSCode extensions
          sudo -u ec2-user /usr/bin/code-server --install-extension ms-vscode.vscode-typescript-next
          sudo -u ec2-user /usr/bin/code-server --install-extension amazonwebservices.aws-toolkit-vscode
          sudo -u ec2-user /usr/bin/code-server --install-extension ms-python.python
          sudo -u ec2-user /usr/bin/code-server --install-extension ms-vscode.vscode-json
          
          # Create sample CDK project
          sudo -u ec2-user mkdir -p /home/ec2-user/cdk-projects
          cd /home/ec2-user/cdk-projects
          sudo -u ec2-user cdk init app --language typescript
          sudo -u ec2-user npm install
          
      Tags:
        - Key: Name
          Value: VSCodeServer-Instance

Outputs:
  VSCodeServerURL:
    Description: URL to access VSCode Server
    Value: !Sub 'http://${VSCodeServerInstance.PublicIp}:8080'
    
  VSCodeServerPassword:
    Description: Password for VSCode Server
    Value: !Sub '${AWS::StackName}-vscode'
    
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${VSCodeServerInstance.PublicIp}'
    
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref VSCodeServerInstance
    
  PublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt VSCodeServerInstance.PublicIp